@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using CWBBlazor.Shared
@using TG.Blazor.IndexedDB
@using Polly
@using Polly.Retry  
<!--We have to inject a generic IHttpClientFactory and IndexedDBManager here -->
@inject IHttpClientFactory clientFactory;
@inject IndexedDBManager DbManager;
@attribute [Authorize]


<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code { 
    override protected void OnInitialized()
    {
        base.OnInitialized();
    }
    private WeatherForecast[] forecasts;
    private void OnIndexedDbNotification(object sender, IndexedDBNotificationArgs args)
    {
        System.Diagnostics.Debug.WriteLine(args.Message);
        if (args.Outcome == IndexDBActionOutCome.Failed)
        {
            System.Diagnostics.Debug.WriteLine(args.Message);
        }
    }
    private async Task WriteForecasts(List<WeatherForecast> forecasts)
    {
        foreach (WeatherForecast wf in forecasts)
        {
            wf.Id = string.IsNullOrEmpty(wf.Id) ? Guid.NewGuid().ToString() : wf.Id;
            System.Diagnostics.Debug.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(wf));
            var newForecast = new StoreRecord<WeatherForecast>
            {
                Storename = "Forecasts",
                Data = wf
            };
            System.Diagnostics.Debug.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(newForecast));
            await DbManager.AddRecord(newForecast);
        }
    }
    private async Task<List<WeatherForecast>> GetForecasts()
    {
        var httpExceptionRetryPolicy = Polly.Policy.Handle<Exception>().RetryAsync(3, async (ex, counter) => { await Task.Delay(500 * counter).ConfigureAwait(false); });
        DbManager.ActionCompleted += OnIndexedDbNotification;
        await httpExceptionRetryPolicy.ExecuteAsync(async () =>
        {
            var client = clientFactory.CreateClient("ServerAPI");
            var results = await client.GetFromJsonAsync<WeatherForecast[]>("https://localhost:44345/api/values");
            await WriteForecasts(results.ToList());
        });

        var results = await DbManager.GetRecords<WeatherForecast>("Forecasts");
        return results;
        //return results;
    }
    private async Task<List<WeatherForecast>> GetLocalForecasts()
    {
        var results = await DbManager.GetRecords<WeatherForecast>("Forecasts");
        return results.ToList<WeatherForecast>();
    }
    protected override async Task OnInitializedAsync()
    {

        try
        {
            await GetLocalForecasts().ContinueWith(fc => this.forecasts = fc.Result.ToArray()).ContinueWith(async (fcContinue) =>
            {
                this.forecasts = (await GetForecasts()).ToArray();
                base.StateHasChanged();
            });
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

}
